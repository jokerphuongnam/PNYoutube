// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if files %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

// MARK: - Plist Files

{% macro fileBlock enumNamed file %}
  {{accessModifier}} typealias DictionaryValue<Value> = (key: String, value: Value)

  {% call documentBlock enumNamed file file.document %}
{% endmacro %}
{% macro documentBlock enumNamed file document %}
  {% set rootType %}{% call typeBlock document.metadata %}{% endset %}
  {% if document.metadata.type == "Array" %}
  {{accessModifier}} static let items: {{rootType}} = arrayFromPlist(at: "{% call transformPath file.path %}")
  {% elif document.metadata.type == "Dictionary" %}
  private static let _document = PlistDocument(path: "{% call transformPath file.path %}")
  {% for key,value in document.metadata.properties %}
  {%+ call propertyBlock enumNamed key value %}
  {% endfor %}
  {% else %}
  // Unsupported root type `{{rootType}}`
  {% endif %}
{% endmacro %}
{% macro typeBlock metadata %}
  {%- if metadata.type == "Array" -%}
    [{% call typeBlock metadata.element %}]
  {%- elif metadata.type == "Dictionary" -%}
    [String: Any]
  {%- else -%}
    {{metadata.type}}
  {%- endif -%}
{% endmacro %}
{% macro propertyBlock enumNamed key metadata %}
  {%- set propertyName %}{{key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset -%}
  {%- set propertyType %}{% call typeBlock metadata %}{% endset -%}

  {%- if metadata.type == "Dictionary" -%}
  {%- set childEnumNamed %}{{key|swiftIdentifier:"pretty"|escapeReservedKeywords}}{% endset -%}
  {{accessModifier}} enum {{childEnumNamed}} {
    private static let _document = PlistDocument(data: {{enumNamed}}._document["{{ key }}"])
    {{accessModifier}} static let key: String = "{{ key }}"
    {% for key,value in metadata.properties %}
    {%+ call propertyBlock childEnumNamed key value %}
    {% endfor %}
  }
  {%- else -%}
  {{accessModifier}} static let {{propertyName}}: DictionaryValue<{{propertyType}}> = (key: "{{ key }}", value: _document["{{ key }}"])
  {%- endif -%}

{% endmacro %}
{% macro transformPath path %}
  {%- if param.preservePath -%}
    {{path}}
  {%- else -%}
    {{path|basename}}
  {%- endif -%}
{% endmacro %}

{%- set enumNamed -%}{{param.enumName|default:"PlistFiles"}}{%- endset -%}
{{accessModifier}} enum {{enumNamed}} {
  {% if files.count > 1 or param.forceFileNameEnum %}
  {% for file in files %}
  {{accessModifier}} enum {{file.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2," ",true %}{% call fileBlock enumNamed file %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call fileBlock enumNamed files.first %}
  {% endif %}
}
// swiftlint:enable identifier_name line_length type_body_length

// MARK: - Implementation Details

private func arrayFromPlist<T>(at path: String) -> [T] {
  {% if param.lookupFunction %}
  guard let url = {{param.lookupFunction}}(path),
  {% else %}
  guard let url = {{param.bundle|default:"BundleToken.bundle"}}.url(forResource: path, withExtension: nil),
  {% endif %}
    let data = NSArray(contentsOf: url) as? [T] else {
    fatalError("Unable to load PLIST at path: \(path)")
  }
  return data
}

private struct PlistDocument {
  let data: [String: Any]

  init(path: String) {
    {% if param.lookupFunction %}
    guard let url = {{param.lookupFunction}}(path),
    {% else %}
    guard let url = {{param.bundle|default:"BundleToken.bundle"}}.url(forResource: path, withExtension: nil),
    {% endif %}
      let data = NSDictionary(contentsOf: url) as? [String: Any] else {
        fatalError("Unable to load PLIST at path: \(path)")
    }
    self.data = data
  }

  init(data: [String: Any]) {
    self.data = data
  }

  subscript<T>(key: String) -> T {
    guard let result = data[key] as? T else {
      fatalError("Property '\(key)' is not of type \(T.self)")
    }
    return result
  }
}
{% if not param.bundle and not param.lookupFunction %}

// swiftlint:disable convenience_type
private final class BundleToken {
  static let bundle: Bundle = {
    #if SWIFT_PACKAGE
    return Bundle.module
    #else
    return Bundle(for: BundleToken.self)
    #endif
  }()
}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No files found
{% endif %}